buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = 'com.tom5454.toms_trading' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'toms_trading_network-1.20.2'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
def useLib = System.getProperty("useLib")

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'official', version: '1.20.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                toms_trading_network {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                toms_trading_network {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'toms_trading_network', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/platform-shared/resources/')

            mods {
                toms_trading_network {
                    source sourceSets.main
                }
            }
        }
    }
    
    runs.each { run -> run.taskName = project.name + (run.taskName.startsWith("run") ? run.taskName.substring(3) : run.taskName) }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets {
	main {
		java {
			srcDir "../TomsTradingNetwork-120/src/shared/java"
			srcDir "src/loader-shared/java"
			srcDir "../TomsTradingNetwork-1202/src/platform-shared/java"
			if(!useLib)exclude "com/tom/trading/rei/**"
			exclude "com/tom/trading/top/**"
		}
		resources {
			srcDir "../TomsTradingNetwork-120/src/shared/resources"
			srcDir "../TomsTradingNetwork-120/src/loader-shared/resources"
			srcDir "../TomsTradingNetwork-1202/src/platform-shared/resources"
		}
	}
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
    	// location of the maven that hosts JEI files since January 2023
    	name = "Jared's maven"
    	url = "https://maven.blamejared.com/"
  	}
  	maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.terraformersmc.com/releases/"}
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.2-48.1.0'
    
    // Mixin annotation processor - generates the refmap
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    //implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.20.2-forge-api:16.0.0.28")
    compileOnly fg.deobf("mezz.jei:jei-1.20.2-common-api:16.0.0.28")
  	// at runtime, use the full JEI jar
  	runtimeOnly fg.deobf("mezz.jei:jei-1.20.2-forge:16.0.0.28")
  	
  	//implementation fg.deobf("curse.maven:the-one-probe-245211:4579432")
  	implementation fg.deobf("curse.maven:jade-324717:4938952")
  	
  	compileOnly fg.deobf("dev.emi:emi-forge:1.0.21+1.20.2:api")
	runtimeOnly fg.deobf("dev.emi:emi-forge:1.0.21+1.20.2")
    
    if(useLib) {
    	compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:13.0.685")
		compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:13.0.685")
		implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:13.0.685")
		implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:12.0.119")
    	implementation fg.deobf("dev.architectury:architectury-forge:10.0.17")
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "tom5454",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "tom5454",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        def mavenURL = System.getProperty("mavenDir")
		if ("${mavenURL}" != "null") {
			maven {
				url = file(mavenURL)
			}
		}
    }
}
